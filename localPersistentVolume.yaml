#
#  A local volume represents a mounted local storage device such as a disk, partition or directory.
#
#  Local volumes can only be used as a statically created PersistentVolume. Dynamic provisioning is not supported yet.
#
#  Compared to hostPath volumes, local volumes can be used in a durable and portable manner without manually scheduling Pods to nodes, as the system is aware of the volume’s node constraints by looking at the node affinity on the PersistentVolume.
#
#  However, local volumes are still subject to the availability of the underlying node and are not suitable for all applications. If a node becomes unhealthy, then the local volume will also become inaccessible, and a Pod using it will not be able to run. Applications using local volumes must be able to tolerate this reduced availability, as well as potential data loss, depending on the durability characteristics of the underlying disk.
#  PersistentVolume nodeAffinity is required when using local volumes. It enables the Kubernetes scheduler to correctly schedule Pods using local volumes to the correct node.
#
#  PersistentVolume volumeMode can now be set to “Block” (instead of the default value “Filesystem”) to expose the local volume as a raw block device. The volumeMode field requires BlockVolume Alpha feature gate to be enabled.
#
#  When using local volumes, it is recommended to create a StorageClass with volumeBindingMode set to WaitForFirstConsumer. See the example. Delaying volume binding ensures that the PersistentVolumeClaim binding decision will also be evaluated with any other node constraints the Pod may have, such as node resource requirements, node selectors, Pod affinity, and Pod anti-affinity.
#

# spec:
#
#  accessModes	<[]string>
#AccessModes contains all ways the volume can be mounted. More info:
#  https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
#
#  capacity	<map[string]string>
#A description of the persistent volume's resources and capacity. More info:
#  https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
#
#  claimRef	<Object>
#  ClaimRef is part of a bi-directional binding between PersistentVolume and
#  PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName
#is the authoritative bind between PV and PVC. More info:
#  https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
#
#  hostPath	<Object>
#  HostPath represents a directory on the host. Provisioned by a developer or
#  tester. This is useful for single-node development and testing only!
#  On-host storage is not supported in any way and WILL NOT WORK in a
#multi-node cluster. More info:
#  https://kubernetes.io/docs/concepts/storage/volumes#hostpath
#
#  local	<Object>
#  Local represents directly-attached storage with node affinity
#
#  mountOptions	<[]string>
#  A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will
#simply fail if one is invalid. More info:
#  https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
#
#  nodeAffinity	<Object>
#  NodeAffinity defines constraints that limit what nodes this volume can be
#  accessed from. This field influences the scheduling of pods that use this
#  volume.
#
#  persistentVolumeReclaimPolicy	<string>
#  What happens to a persistent volume when released from its claim. Valid
#  options are Retain (default for manually created PersistentVolumes), Delete
#  (default for dynamically provisioned PersistentVolumes), and Recycle
#  (deprecated). Recycle must be supported by the volume plugin underlying
#this PersistentVolume. More info:
#  https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
#
#  quobyte	<Object>
#  Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
#
#  volumeMode	<string>
#  volumeMode defines if a volume is intended to be used with a formatted
#  filesystem or to remain in raw block state. Value of Filesystem is implied
#  when not included in spec. This is a beta feature.
#

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: example-pv
spec:
  capacity:
    storage: 100Gi
  # volumeMode field requires BlockVolume Alpha feature gate to be enabled.
  # volumeMode: Filesystem
  # ReadWriteOnce – the volume can be mounted as read-write by a single node
  # ReadOnlyMany – the volume can be mounted read-only by many nodes
  # ReadWriteMany – the volume can be mounted as read-write by many nodes
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  local:
    path: /mnt/disks/ssd1
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
                - example-node
---
